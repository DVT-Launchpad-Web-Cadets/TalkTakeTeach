events {
    worker_connections 1024;
}

http {
    # Use Dockers builtin resolver to find the other Docker based services
    resolver 127.0.0.11 ipv6=off;

    include /etc/nginx/mime.types;

    # Define the log format for the access logs
   log_format json_combined escape=json '{'
        '"remote_addr":"$remote_addr",'
        '"remote_user":"$remote_user",'
        '"timestamp":"$time_iso8601",'
        '"request":"$request",'
        '"service":"nginx",'
        '"status":"$status",'
        '"connection":$connection,'
        '"http_referer":"$http_referer",'
        '"http_user_agent":"$http_user_agent"'
    '}';

    # the below specifies the log file location and format
    access_log /var/log/nginx/access.log json_combined;
    error_log /var/log/nginx/error.log error;

    server {
        listen 80;
        server_name localhost;

        root /usr/share/nginx/html;
        index index.csr.html;

        # locations specify routes to different parts of the application
        location /home {
            alias /usr/share/nginx/html/home;
            try_files $uri /home/index.html;
        }

        location /chat {
            alias /usr/share/nginx/html/chat;
            try_files $uri /chat/index.html;
        }

        # Reverse proxy for API
        location /api/ {
            proxy_pass http://elysia:3000/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location / {
            try_files $uri $uri/ /index.csr.html;
        }
    }
}
